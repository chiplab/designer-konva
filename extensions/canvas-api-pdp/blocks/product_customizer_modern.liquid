{% comment %}
  Product Customizer Block for Modern Themes
  This block integrates with the new Horizons 2025 themes
{% endcomment %}


{% comment %} Find the template ID for the selected variant {% endcomment %}
{% assign selected_variant_id = product.selected_or_first_available_variant.id %}
{% assign template_id = null %}
{% for variant in product.variants %}
  {% if variant.id == selected_variant_id %}
    {% if variant.metafields.custom_designer.template_id %}
      {% assign template_id = variant.metafields.custom_designer.template_id %}
    {% elsif variant.metafields.custom_designer.template_id.value %}
      {% assign template_id = variant.metafields.custom_designer.template_id.value %}
    {% endif %}
  {% endif %}
{% endfor %}

{% if template_id %}
  <div class="product-customizer-wrapper" data-product-customizer>
    <button 
      id="customize-product-btn" 
      class="product-customizer-button button button--secondary"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-template-id="{{ template_id }}"
    >
      {{ block.settings.button_text | default: 'Customize this design' }}
    </button>
  </div>

  {% comment %} Load customizer modal script (Konva will be loaded on demand) {% endcomment %}
  <script src="{{ 'canvas-text-renderer.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
  <script src="{{ 'product-customizer-modal.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
  
  <script>
    let variantChangeCount = 0;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Create a map of variant data
      const variantData = {
        {% for variant in product.variants %}
          '{{ variant.id }}': {
            title: '{{ variant.title }}',
            available: {{ variant.available }},
            templateId: {% if variant.metafields.custom_designer.template_id %}'{{ variant.metafields.custom_designer.template_id }}'{% else %}null{% endif %}
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };
      
      const customizeBtn = document.getElementById('customize-product-btn');
      if (!customizeBtn) {
        return;
      }
      
      // Check if we have a saved customization for the current variant
      function checkSavedCustomization(variantId) {
        const customizationKey = `customization_${variantId}`;
        const savedCustomization = localStorage.getItem(customizationKey);
        
        if (savedCustomization) {
          try {
            const data = JSON.parse(savedCustomization);
            // Update the main product image if we have a saved preview
            if (data.thumbnail && Date.now() - data.timestamp < 30 * 24 * 60 * 60 * 1000) {
              updateProductImageWithCustomization(data.thumbnail);
              return data;
            }
          } catch (e) {
            console.error('Error loading saved customization:', e);
          }
        }
        return null;
      }
      
      // Update product image with customization preview
      function updateProductImageWithCustomization(previewUrl) {
        // Find the main product image
        const mainProductImage = document.querySelector(
          '.media-gallery img:first-of-type, ' +
          '.product-media img:first-of-type, ' +
          '.product__media--featured img, ' +
          '[data-product-featured-image]'
        );
        
        if (mainProductImage) {
          mainProductImage.dataset.originalSrc = mainProductImage.src;
          mainProductImage.src = previewUrl;
          mainProductImage.srcset = ''; // Clear srcset to prevent responsive image issues
        }
      }
      
      // Store all variant images for dynamic updates
      const variantImages = {
        {% for variant in product.variants %}
          '{{ variant.id }}': {% if variant.featured_image %}'{{ variant.featured_image | image_url: width: 1000 }}'{% else %}null{% endif %}{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };
      
      // Get the initial variant's featured image
      let productImageUrl = variantImages['{{ product.selected_or_first_available_variant.id }}'] || '{{ product.featured_image | image_url: width: 1000 }}';
      
      // Wait for modal script to load
      function initializeWhenReady() {
        if (typeof ProductCustomizerModal === 'undefined') {
          setTimeout(initializeWhenReady, 100);
          return;
        }
        
        // Initialize customizer modal
        const customizer = new ProductCustomizerModal({
          variantId: customizeBtn.dataset.variantId,
          templateId: customizeBtn.dataset.templateId,
          apiUrl: '/apps/designer',
          productImageUrl: productImageUrl,
          useModernTheme: true, // Flag for modern theme support
          onSave: function(customization) {
            // Add customization to cart
            const formData = {
              id: customization.variantId,
              quantity: 1,
              properties: {
                '_customization_id': customization.designId || Date.now().toString(),
                '_template_id': customization.templateId,
                '_custom_preview': customization.preview,
                '_customization_type': customization.designId ? 'customer_design' : 'quick_custom'
              }
            };
            
            // Only add text updates if they exist (for quick customization)
            if (customization.textUpdates) {
              Object.entries(customization.textUpdates).forEach(([key, value]) => {
                formData.properties[`Text: ${key}`] = value;
              });
            }
            
            // Add to cart via Shopify AJAX API
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
              // Trigger cart update event for modern themes
              document.dispatchEvent(new CustomEvent('cart:updated', { detail: data }));
              
              // Show success notification or redirect based on settings
              if ('{{ block.settings.redirect_to_cart }}' === 'true') {
                window.location.href = '/cart';
              } else {
                // Trigger theme's cart drawer if available
                const cartDrawerOpen = new CustomEvent('cart:open');
                document.dispatchEvent(cartDrawerOpen);
              }
            })
            .catch(error => {
              console.error('Error adding to cart:', error);
              alert('{{ block.settings.error_message | default: "Failed to add customized product to cart. Please try again." }}');
            });
          }
        });
        
        customizer.init();
        
        // Open modal on button click
        customizeBtn.addEventListener('click', function(e) {
          e.preventDefault();
          customizer.open();
        });
        
        // Function to handle variant changes
        function handleVariantChange(variantId) {
          variantChangeCount++;
          
          if (!variantId) return;
          
          // Find template ID for this variant from the variants data
          let templateId = null;
          {% for variant in product.variants %}
            if ('{{ variant.id }}' === String(variantId)) {
              {% if variant.metafields.custom_designer.template_id %}
                templateId = '{{ variant.metafields.custom_designer.template_id }}';
              {% elsif variant.metafields.custom_designer.template_id.value %}
                templateId = '{{ variant.metafields.custom_designer.template_id.value }}';
              {% endif %}
            }
          {% endfor %}
          
          if (templateId) {
            // Update button with new variant data
            customizeBtn.dataset.variantId = variantId;
            customizeBtn.dataset.templateId = templateId;
            customizeBtn.parentElement.style.display = 'block';
            
            // Update the product image URL for this variant
            productImageUrl = variantImages[variantId] || productImageUrl;
            
            // Update customizer options
            customizer.options.variantId = variantId;
            customizer.options.templateId = templateId;
            customizer.options.productImageUrl = productImageUrl;
            
            // Check for saved customization for this variant
            checkSavedCustomization(variantId);
          } else {
            // Hide button if variant has no template
            customizeBtn.parentElement.style.display = 'none';
            
            // Restore original image if switching to non-customizable variant
            const mainProductImage = document.querySelector('[data-original-src]');
            if (mainProductImage && mainProductImage.dataset.originalSrc) {
              mainProductImage.src = mainProductImage.dataset.originalSrc;
              mainProductImage.removeAttribute('data-original-src');
            }
          }
        }
        
        // Listen for variant changes - try multiple event patterns
        // Modern themes
        document.addEventListener('variant:change', function(event) {
          if (event.detail && event.detail.variant) {
            handleVariantChange(event.detail.variant.id);
          }
        });
        
        // Some themes use this pattern
        document.addEventListener('variantChange', function(event) {
          if (event.detail && event.detail.variant) {
            handleVariantChange(event.detail.variant.id);
          }
        });
        
        // Horizons themes might use URL changes
        let lastVariantId = '{{ product.selected_or_first_available_variant.id }}';
        setInterval(function() {
          const urlParams = new URLSearchParams(window.location.search);
          const currentVariantId = urlParams.get('variant');
          if (currentVariantId && currentVariantId !== lastVariantId) {
            lastVariantId = currentVariantId;
            handleVariantChange(currentVariantId);
          }
        }, 500);
        
        // Also listen for form changes on variant selectors
        document.querySelectorAll('[name="id"], [name="variant"]').forEach(function(selector) {
          selector.addEventListener('change', function(event) {
            handleVariantChange(event.target.value);
          });
        });
        
        // Check for saved customization on initial load
        const initialVariantId = '{{ product.selected_or_first_available_variant.id }}';
        if (initialVariantId) {
          checkSavedCustomization(initialVariantId);
        }
      }
      
      initializeWhenReady();
    });
  </script>

  <style>
    .product-customizer-wrapper {
      margin-top: 1rem;
    }
    
    .product-customizer-button {
      width: 100%;
      justify-content: center;
    }
    
    .product-customizer-button .icon {
      margin-right: 0.5rem;
    }
  </style>
{% endif %}

{% schema %}
{
  "name": "Product Customizer",
  "target": "section",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Customize this design"
    },
    {
      "type": "checkbox",
      "id": "redirect_to_cart",
      "label": "Redirect to cart after adding",
      "default": false
    },
    {
      "type": "text",
      "id": "error_message",
      "label": "Error Message",
      "default": "Failed to add customized product to cart. Please try again."
    }
  ]
}
{% endschema %}
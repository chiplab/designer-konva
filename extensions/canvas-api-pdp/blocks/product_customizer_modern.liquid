{% comment %}
  Product Customizer Block for Modern Themes
  This block integrates with the new Horizons 2025 themes
{% endcomment %}


{% comment %} Find the template ID for the selected variant {% endcomment %}
{% assign selected_variant_id = product.selected_or_first_available_variant.id %}
{% assign template_id = null %}
{% for variant in product.variants %}
  {% if variant.id == selected_variant_id %}
    {% if variant.metafields.custom_designer.template_id %}
      {% assign template_id = variant.metafields.custom_designer.template_id %}
    {% elsif variant.metafields.custom_designer.template_id.value %}
      {% assign template_id = variant.metafields.custom_designer.template_id.value %}
    {% endif %}
  {% endif %}
{% endfor %}

{% if template_id %}
  <div class="product-customizer-wrapper" data-product-customizer>
    <button 
      id="customize-product-btn" 
      class="product-customizer-button button button--secondary"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-template-id="{{ template_id }}"
    >
      {{ block.settings.button_text | default: 'Customize this design' }}
    </button>
  </div>

  {% comment %} Load customizer modal script (Konva will be loaded on demand) {% endcomment %}
  <script src="{{ 'canvas-text-renderer.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
  <script src="{{ 'product-customizer-modal.js' | asset_url }}?v={{ 'now' | date: '%s' }}" defer></script>
  
  <script>
    let variantChangeCount = 0;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Create a map of variant data
      const variantData = {
        {% for variant in product.variants %}
          '{{ variant.id }}': {
            title: '{{ variant.title }}',
            available: {{ variant.available }},
            templateId: {% if variant.metafields.custom_designer.template_id %}'{{ variant.metafields.custom_designer.template_id }}'{% else %}null{% endif %}
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };
      
      const customizeBtn = document.getElementById('customize-product-btn');
      if (!customizeBtn) {
        return;
      }
      
      // Check if we have a saved customization for the current variant
      function checkSavedCustomization(variantId) {
        // First check for global text state
        const textKey = `customization_global_text`;
        const savedText = localStorage.getItem(textKey);
        
        if (savedText) {
          // We have global text, but need to regenerate preview for this variant
          // This will be handled by the customizer when it opens
          return { hasGlobalText: true };
        }
        
        // Then check variant-specific customization
        const customizationKey = `customization_${variantId}`;
        const savedCustomization = localStorage.getItem(customizationKey);
        
        if (savedCustomization) {
          try {
            const data = JSON.parse(savedCustomization);
            // Update the main product image if we have a saved preview
            if (data.thumbnail && Date.now() - data.timestamp < 30 * 24 * 60 * 60 * 1000) {
              updateProductImageWithCustomization(data.thumbnail);
              return data;
            }
          } catch (e) {
            console.error('Error loading saved customization:', e);
          }
        }
        return null;
      }
      
      // Helper function to get variant title
      function getVariantTitle(variantId) {
        const variantInfo = variantData[variantId];
        return variantInfo ? variantInfo.title : null;
      }
      
      // Update product image with customization preview
      function updateProductImageWithCustomization(previewUrl) {
        // Find the main product image
        const mainProductImage = document.querySelector(
          '.media-gallery img:first-of-type, ' +
          '.product-media img:first-of-type, ' +
          '.product__media--featured img, ' +
          '[data-product-featured-image]'
        );
        
        if (mainProductImage) {
          mainProductImage.dataset.originalSrc = mainProductImage.src;
          mainProductImage.src = previewUrl;
          mainProductImage.srcset = ''; // Clear srcset to prevent responsive image issues
        }
      }
      
      // Store all variant images for dynamic updates
      const variantImages = {
        {% for variant in product.variants %}
          '{{ variant.id }}': {% if variant.featured_image %}'{{ variant.featured_image | image_url: width: 1000 }}'{% else %}null{% endif %}{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };
      
      // Get the initial variant's featured image
      let productImageUrl = variantImages['{{ product.selected_or_first_available_variant.id }}'] || '{{ product.featured_image | image_url: width: 1000 }}';
      
      // Wait for modal script to load
      function initializeWhenReady() {
        if (typeof ProductCustomizerModal === 'undefined') {
          setTimeout(initializeWhenReady, 100);
          return;
        }
        
        // Initialize customizer modal
        const customizer = new ProductCustomizerModal({
          variantId: customizeBtn.dataset.variantId,
          templateId: customizeBtn.dataset.templateId,
          apiUrl: '/apps/designer',
          productImageUrl: productImageUrl,
          useModernTheme: true, // Flag for modern theme support
          onSave: function(customization) {
            // Add customization to cart
            const formData = {
              id: customization.variantId,
              quantity: 1,
              properties: {
                '_customization_id': customization.designId || Date.now().toString(),
                '_template_id': customization.templateId,
                '_custom_preview': customization.preview,
                '_customization_type': customization.designId ? 'customer_design' : 'quick_custom'
              }
            };
            
            // Only add text updates if they exist (for quick customization)
            if (customization.textUpdates) {
              Object.entries(customization.textUpdates).forEach(([key, value]) => {
                formData.properties[`Text: ${key}`] = value;
              });
            }
            
            // Add to cart via Shopify AJAX API
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
              // Trigger cart update event for modern themes
              document.dispatchEvent(new CustomEvent('cart:updated', { detail: data }));
              
              // Show success notification or redirect based on settings
              if ('{{ block.settings.redirect_to_cart }}' === 'true') {
                window.location.href = '/cart';
              } else {
                // Trigger theme's cart drawer if available
                const cartDrawerOpen = new CustomEvent('cart:open');
                document.dispatchEvent(cartDrawerOpen);
              }
            })
            .catch(error => {
              console.error('Error adding to cart:', error);
              alert('{{ block.settings.error_message | default: "Failed to add customized product to cart. Please try again." }}');
            });
          }
        });
        
        customizer.init();
        
        // Open modal on button click
        customizeBtn.addEventListener('click', function(e) {
          e.preventDefault();
          customizer.open();
        });
        
        // Function to handle variant changes
        async function handleVariantChange(variantId) {
          variantChangeCount++;
          
          if (!variantId) return;
          
          // Find template ID for this variant from the variants data
          let templateId = null;
          {% for variant in product.variants %}
            if ('{{ variant.id }}' === String(variantId)) {
              {% if variant.metafields.custom_designer.template_id %}
                templateId = '{{ variant.metafields.custom_designer.template_id }}';
              {% elsif variant.metafields.custom_designer.template_id.value %}
                templateId = '{{ variant.metafields.custom_designer.template_id.value }}';
              {% endif %}
            }
          {% endfor %}
          
          if (templateId) {
            // Update button with new variant data
            customizeBtn.dataset.variantId = variantId;
            customizeBtn.dataset.templateId = templateId;
            customizeBtn.parentElement.style.display = 'block';
            
            // Update the product image URL for this variant
            productImageUrl = variantImages[variantId] || productImageUrl;
            
            // Update customizer options
            customizer.options.variantId = variantId;
            customizer.options.templateId = templateId;
            customizer.options.productImageUrl = productImageUrl;
            
            // Let the customizer handle the variant change if modal is open
            if (customizer.isOpen) {
              await customizer.handleVariantChange(variantId, templateId);
            }
            
            // Check for global canvas state from full designer first
            const globalStateKey = 'customization_global_state';
            const savedGlobalState = localStorage.getItem(globalStateKey);
            
            if (savedGlobalState) {
              try {
                const globalData = JSON.parse(savedGlobalState);
                if (globalData.canvasState && globalData.timestamp && Date.now() - globalData.timestamp < 30 * 24 * 60 * 60 * 1000) {
                  // We have global canvas state from full designer
                  console.log('[ProductCustomizer] Regenerating preview for variant change with full designer state');
                  
                  // Update the global flag
                  hasActiveCustomization = true;
                  
                  // Add loading state to product image
                  const mainProductImage = document.querySelector(
                    '.media-gallery img:first-of-type, ' +
                    '.product-media img:first-of-type, ' +
                    '.product__media--featured img, ' +
                    '[data-product-featured-image]'
                  );
                  
                  if (mainProductImage) {
                    // Add loading state
                    mainProductImage.style.opacity = '0.7';
                    mainProductImage.style.filter = 'grayscale(50%)';
                    mainProductImage.style.transition = 'opacity 0.3s, filter 0.3s';
                  }
                  
                  // Generate preview with full canvas state
                  if (typeof generateVariantPreviewWithCanvasState === 'function') {
                    await generateVariantPreviewWithCanvasState(variantId, templateId, globalData.canvasState);
                  } else {
                    console.log('[ProductCustomizer] Waiting for resources to load before generating preview');
                    setTimeout(async () => {
                      if (typeof generateVariantPreviewWithCanvasState === 'function') {
                        await generateVariantPreviewWithCanvasState(variantId, templateId, globalData.canvasState);
                      }
                    }, 500);
                  }
                  
                  return; // Skip other checks
                }
              } catch (e) {
                console.error('Error parsing global canvas state:', e);
              }
            }
            
            // Otherwise check for global text state and regenerate preview if needed
            const globalTextKey = 'customization_global_text';
            const savedText = localStorage.getItem(globalTextKey);
            
            if (savedText) {
              try {
                const textData = JSON.parse(savedText);
                if (textData.textUpdates && textData.timestamp && Date.now() - textData.timestamp < 30 * 24 * 60 * 60 * 1000) {
                  // We have global text, generate preview for new variant
                  console.log('[ProductCustomizer] Generating preview for variant change with saved text');
                  
                  // Update the global flag
                  hasActiveCustomization = true;
                  
                  // Prevent any default image updates by intercepting image src changes
                  const mainProductImage = document.querySelector(
                    '.media-gallery img:first-of-type, ' +
                    '.product-media img:first-of-type, ' +
                    '.product__media--featured img, ' +
                    '[data-product-featured-image]'
                  );
                  
                  if (mainProductImage) {
                    // Store current customized image
                    const currentCustomizedSrc = mainProductImage.src;
                    
                    // Add loading state to current image
                    mainProductImage.style.opacity = '0.7';
                    mainProductImage.style.filter = 'grayscale(50%)';
                    mainProductImage.style.transition = 'opacity 0.3s, filter 0.3s';
                    
                    // Intercept any attempts to change the image
                    const observer = new MutationObserver((mutations) => {
                      mutations.forEach((mutation) => {
                        if (mutation.attributeName === 'src' && 
                            mainProductImage.src !== currentCustomizedSrc &&
                            !mainProductImage.src.includes('data:image')) {
                          // Theme tried to update to default variant image, prevent it
                          console.log('[ProductCustomizer] Preventing default image update');
                          mainProductImage.src = currentCustomizedSrc;
                        }
                      });
                    });
                    
                    // Start observing
                    observer.observe(mainProductImage, { attributes: true, attributeFilter: ['src'] });
                    
                    // Stop observing after preview is generated
                    setTimeout(() => observer.disconnect(), 5000);
                  }
                  
                  // Check if the function is available (script is loaded)
                  if (typeof generateVariantPreviewWithText === 'function') {
                    await generateVariantPreviewWithText(variantId, templateId, textData.textUpdates);
                    return; // Skip normal customization check since we handled it
                  } else {
                    console.log('[ProductCustomizer] Waiting for resources to load before generating preview');
                    // Fallback: wait for resources and try again
                    setTimeout(async () => {
                      if (typeof generateVariantPreviewWithText === 'function') {
                        await generateVariantPreviewWithText(variantId, templateId, textData.textUpdates);
                      }
                    }, 500);
                  }
                  
                  return; // Important: skip the normal variant image update below
                }
              } catch (e) {
                console.error('Error parsing saved text:', e);
              }
            }
            
            // Only check for saved customization if we don't have global text
            checkSavedCustomization(variantId);
          } else {
            // Hide button if variant has no template
            customizeBtn.parentElement.style.display = 'none';
            
            // Restore original image if switching to non-customizable variant
            const mainProductImage = document.querySelector('[data-original-src]');
            if (mainProductImage && mainProductImage.dataset.originalSrc) {
              mainProductImage.src = mainProductImage.dataset.originalSrc;
              mainProductImage.removeAttribute('data-original-src');
            }
          }
        }
        
        // Track if we have active customizations
        let hasActiveCustomization = false;
        
        // Check initial state for customization
        // First check for global canvas state from full designer
        const globalStateKey = 'customization_global_state';
        const savedGlobalState = localStorage.getItem(globalStateKey);
        if (savedGlobalState) {
          try {
            const globalData = JSON.parse(savedGlobalState);
            if (globalData.canvasState && globalData.timestamp && Date.now() - globalData.timestamp < 30 * 24 * 60 * 60 * 1000) {
              hasActiveCustomization = true;
              console.log('[ProductCustomizer] Active customization from full designer detected');
            }
          } catch (e) {}
        }
        
        // Also check for legacy text-only customization
        if (!hasActiveCustomization) {
          const globalTextKey = 'customization_global_text';
          const savedText = localStorage.getItem(globalTextKey);
          if (savedText) {
            try {
              const textData = JSON.parse(savedText);
              if (textData.textUpdates && Object.keys(textData.textUpdates).length > 0) {
                hasActiveCustomization = true;
              }
            } catch (e) {}
          }
        }
        
        // Listen for variant changes - try multiple event patterns
        // Modern themes
        document.addEventListener('variant:change', function(event) {
          if (event.detail && event.detail.variant) {
            // If we have active customization, prevent the default image update
            if (hasActiveCustomization) {
              event.preventDefault();
              event.stopImmediatePropagation();
            }
            handleVariantChange(event.detail.variant.id);
          }
        });
        
        // Some themes use this pattern
        document.addEventListener('variantChange', function(event) {
          if (event.detail && event.detail.variant) {
            if (hasActiveCustomization) {
              event.preventDefault();
              event.stopImmediatePropagation();
            }
            handleVariantChange(event.detail.variant.id);
          }
        });
        
        // Horizons themes might use URL changes
        let lastVariantId = '{{ product.selected_or_first_available_variant.id }}';
        setInterval(function() {
          const urlParams = new URLSearchParams(window.location.search);
          const currentVariantId = urlParams.get('variant');
          if (currentVariantId && currentVariantId !== lastVariantId) {
            lastVariantId = currentVariantId;
            handleVariantChange(currentVariantId);
          }
        }, 500);
        
        // Also listen for form changes on variant selectors
        document.querySelectorAll('[name="id"], [name="variant"]').forEach(function(selector) {
          selector.addEventListener('change', function(event) {
            handleVariantChange(event.target.value);
          });
        });
        
        // Check for saved customization on initial load
        const initialVariantId = '{{ product.selected_or_first_available_variant.id }}';
        if (initialVariantId) {
          checkSavedCustomization(initialVariantId);
        }
        
        // Restore variant swatches if we have global canvas state
        if (hasActiveCustomization) {
          restoreVariantSwatchesOnLoad();
        }
        
        // Clean up expired localStorage data
        cleanupExpiredData();
      }
      
      // Function to clean up expired localStorage data
      function cleanupExpiredData() {
        const keysToCheck = [];
        
        // Find all variant preview keys
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith('variant_previews_')) {
            keysToCheck.push(key);
          }
        }
        
        // Check and remove expired data
        keysToCheck.forEach(key => {
          try {
            const data = JSON.parse(localStorage.getItem(key));
            if (!data.timestamp || Date.now() - data.timestamp >= 30 * 24 * 60 * 60 * 1000) {
              localStorage.removeItem(key);
              console.log('[ProductCustomizer] Removed expired data:', key);
            }
          } catch (e) {
            // Invalid data, remove it
            localStorage.removeItem(key);
          }
        });
        
        // Also check if global canvas state exists but is expired
        // If so, clear all associated variant previews
        const globalStateKey = 'customization_global_state';
        const savedGlobalState = localStorage.getItem(globalStateKey);
        if (!savedGlobalState || !hasActiveCustomization) {
          // No active customization, clear all variant previews
          keysToCheck.forEach(key => {
            if (key.startsWith('variant_previews_')) {
              localStorage.removeItem(key);
              console.log('[ProductCustomizer] Cleared variant previews (no active customization)');
            }
          });
        }
      }
      
      // Function to restore saved variant swatches on page load
      function restoreVariantSwatchesOnLoad() {
        console.log('[ProductCustomizer] Checking for saved variant swatches');
        
        // Get current variant info to determine the pattern
        const currentVariantTitle = getVariantTitleForId(initialVariantId);
        if (!currentVariantTitle) {
          console.log('[ProductCustomizer] Could not determine variant title');
          return;
        }
        
        const parts = currentVariantTitle.split(' / ');
        const edgePattern = parts.length > 1 ? parts[1].trim() : null;
        
        if (!edgePattern) {
          console.log('[ProductCustomizer] Could not determine pattern');
          return;
        }
        
        // Look for saved variant previews for this pattern
        const variantPreviewsKey = `variant_previews_${edgePattern}`;
        const savedPreviews = localStorage.getItem(variantPreviewsKey);
        
        if (!savedPreviews) {
          console.log('[ProductCustomizer] No saved previews found for pattern:', edgePattern);
          return;
        }
        
        try {
          const previewData = JSON.parse(savedPreviews);
          
          // Check if data is less than 30 days old
          if (!previewData.timestamp || Date.now() - previewData.timestamp >= 30 * 24 * 60 * 60 * 1000) {
            console.log('[ProductCustomizer] Saved previews expired');
            localStorage.removeItem(variantPreviewsKey);
            return;
          }
          
          console.log(`[ProductCustomizer] Found saved previews for ${Object.keys(previewData.previews).length} variants`);
          
          // Apply saved previews to swatches
          let restoredCount = 0;
          Object.entries(previewData.previews).forEach(([color, previewUrl]) => {
            // Find the swatch element for this color
            const swatch = document.querySelector(`.swatch[data-swatch-value="${color}"]`) ||
                          document.querySelector(`.swatch[data-value="${color}"]`);
            
            if (!swatch) {
              // Try finding by input value
              const inputs = document.querySelectorAll('input[type="radio"][name*="Color"]');
              for (const input of inputs) {
                if (input.value === color) {
                  const nextSwatch = input.nextElementSibling;
                  if (nextSwatch?.classList.contains('swatch')) {
                    applyPreviewToSwatch(nextSwatch, previewUrl);
                    restoredCount++;
                    break;
                  }
                }
              }
            } else {
              applyPreviewToSwatch(swatch, previewUrl);
              restoredCount++;
            }
          });
          
          console.log(`[ProductCustomizer] Restored ${restoredCount} variant swatches`);
          
        } catch (error) {
          console.error('[ProductCustomizer] Error restoring swatches:', error);
        }
      }
      
      // Helper function to apply preview to a swatch element
      function applyPreviewToSwatch(swatch, previewUrl) {
        // Store original if not already stored
        if (!swatch.dataset.originalBackground) {
          swatch.dataset.originalBackground = swatch.getAttribute('style');
        }
        
        swatch.setAttribute('style', `--swatch-background: url(${previewUrl});`);
        swatch.setAttribute('data-multi-preview', 'true');
      }
      
      // Helper function to get variant title by ID
      function getVariantTitleForId(variantId) {
        const variantInfo = variantData[variantId];
        return variantInfo ? variantInfo.title : null;
      }
      
      
      initializeWhenReady();
    });
  </script>

  <style>
    .product-customizer-wrapper {
      margin-top: 1rem;
    }
    
    .product-customizer-button {
      width: 100%;
      justify-content: center;
    }
    
    .product-customizer-button .icon {
      margin-right: 0.5rem;
    }
  </style>
{% endif %}

{% schema %}
{
  "name": "Product Customizer",
  "target": "section",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Customize this design"
    },
    {
      "type": "checkbox",
      "id": "redirect_to_cart",
      "label": "Redirect to cart after adding",
      "default": false
    },
    {
      "type": "text",
      "id": "error_message",
      "label": "Error Message",
      "default": "Failed to add customized product to cart. Please try again."
    }
  ]
}
{% endschema %}
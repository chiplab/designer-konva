{% comment %}
  Canvas Renderer - Product Customization
  This block renders templates bound to product variants via metafields
{% endcomment %}

{% assign template_id = product.selected_or_first_available_variant.metafields.custom_designer.template_id %}

<div class="canvas-renderer-test">
  <h2>Product Customization</h2>
  {% if template_id %}
    <p>Template ID: {{ template_id }} (bound to {{ product.selected_or_first_available_variant.title }})</p>
  {% else %}
    <p>No template bound to this variant. <a href="/admin/apps/designer/product-bindings">Configure template bindings</a>.</p>
  {% endif %}
  
  <div id="test-canvas-container" style="background: #f5f5f5; padding: 20px; border-radius: 8px;">
    <div id="test-canvas" style="background: white; display: inline-block; margin: 0 auto;"></div>
  </div>
  
  {% if template_id %}
  <div id="test-controls" style="margin-top: 20px;">
    <button id="load-template-btn" class="button">Load Template</button>
    <button id="test-text-update-btn" class="button" style="display: none;">Update Text</button>
    <button id="open-modal-btn" class="button" style="display: none;">Open Customizer Modal</button>
  </div>
  {% else %}
  <div style="margin-top: 20px; text-align: center; color: #666;">
    <p>This product variant doesn't have a customization template assigned.</p>
    <p>Contact the store administrator to set up product customization.</p>
  </div>
  {% endif %}
  
  <div id="test-output" style="margin-top: 20px; font-family: monospace; font-size: 12px; background: #f0f0f0; padding: 10px; border-radius: 4px; display: none;">
  </div>
</div>

<script src="https://unpkg.com/konva@9/konva.min.js"></script>
<script src="{{ 'canvas-text-renderer.js' | asset_url }}" defer></script>
<script src="{{ 'product-customizer-modal.js' | asset_url }}" defer></script>

{% if template_id %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const canvasContainer = document.getElementById('test-canvas');
  const loadBtn = document.getElementById('load-template-btn');
  const updateBtn = document.getElementById('test-text-update-btn');
  const modalBtn = document.getElementById('open-modal-btn');
  const output = document.getElementById('test-output');
  
  const templateId = '{{ template_id }}';
  const variantId = '{{ product.selected_or_first_available_variant.id }}';
  let renderer = null;
  let customizer = null;
  
  // Only initialize if we have a template ID
  if (!templateId) {
    console.warn('No template ID found for this variant');
    return;
  }
  
  loadBtn.addEventListener('click', async function() {
    output.style.display = 'block';
    output.innerHTML = 'Loading template...';
    
    try {
      // Initialize renderer
      renderer = new CanvasTextRenderer(canvasContainer, {
        apiUrl: '/apps/designer',
        onReady: function() {
          output.innerHTML = 'Template loaded successfully!<br>';
          output.innerHTML += 'Canvas size: ' + renderer.stage.width() + 'x' + renderer.stage.height() + '<br>';
          
          const elements = renderer.getAllTextElements();
          output.innerHTML += 'Text elements: ' + elements.length + '<br>';
          elements.forEach(el => {
            output.innerHTML += '- ' + el.type + ': "' + el.text + '"<br>';
          });
          
          // Check for images
          if (renderer.template.elements.imageElements && renderer.template.elements.imageElements.length > 0) {
            output.innerHTML += 'Image elements: ' + renderer.template.elements.imageElements.length + '<br>';
          }
          
          updateBtn.style.display = 'inline-block';
          modalBtn.style.display = 'inline-block';
        }
      });
      
      // Load the template bound to this variant
      await renderer.loadTemplate(templateId);
      
    } catch (error) {
      output.innerHTML = 'Error: ' + error.message;
      console.error('Failed to load template:', error);
    }
  });
  
  updateBtn.addEventListener('click', function() {
    if (!renderer) return;
    
    const elements = renderer.getAllTextElements();
    elements.forEach((el, index) => {
      renderer.updateText(el.id, 'Updated Text ' + (index + 1));
    });
    
    output.innerHTML += '<br>Text updated!';
  });
  
  modalBtn.addEventListener('click', function() {
    if (!customizer) {
      // Initialize customizer modal
      customizer = new ProductCustomizerModal({
        variantId: variantId,
        templateId: templateId,
        apiUrl: '/apps/designer',
        onSave: function(customization) {
          output.innerHTML += '<br>Customization saved! Preview: <br>';
          output.innerHTML += '<img src="' + customization.preview + '" style="max-width: 200px; margin-top: 10px;">';
        }
      });
      customizer.init();
    }
    
    customizer.open();
  });
});
</script>
{% endif %}

<style>
  .canvas-renderer-test {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .button {
    padding: 10px 20px;
    background: #000;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 10px;
  }
  
  .button:hover {
    background: #333;
  }
</style>

{% schema %}
{
  "name": "Canvas Renderer Test",
  "target": "section",
  "settings": []
}
{% endschema %}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)

  @@map("session")
}

// Legacy ProductLayout model (to be removed after migration)
model ProductLayout {
  id             String     @id @default(cuid())
  name           String
  shop           String
  width          Int
  height         Int
  baseImageUrl   String
  attributes     Json
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  designableArea Json
  variantImages  Json       @default("{}")
  templates      Template[]

  @@index([shop])
}

// New ProductLayout model for refactored architecture
model Layout {
  id               String           @id @default(cuid())
  shop             String
  shopifyProductId String
  productTitle     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  layoutVariants   LayoutVariant[]
  
  @@unique([shop, shopifyProductId])
  @@index([shop])
}

model LayoutVariant {
  id                String         @id @default(cuid())
  layoutId          String
  shopifyVariantId  String
  variantTitle      String
  baseImageUrl      String         // S3 URL for fast loading
  shopifyImageUrl   String?        // Original Shopify URL for reference
  position          Int            // Display order
  color             String?        // Extracted color (e.g., "Red", "Blue")
  pattern           String?        // Extracted pattern (e.g., "8 Spot", "Solid")
  layout            Layout         @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  templates         Template[]
  
  @@unique([layoutId, shopifyVariantId])
  @@index([layoutId])
}

model Template {
  id               String         @id @default(cuid())
  name             String
  shop             String
  canvasData       String
  thumbnail        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // New architecture reference
  layoutVariantId  String?
  layoutVariant    LayoutVariant? @relation(fields: [layoutVariantId], references: [id])
  
  // Legacy fields (to be removed after migration)
  productLayoutId  String?
  colorVariant     String?
  isColorVariant   Boolean        @default(false)
  masterTemplateId String?
  shopifyProductId String?
  shopifyVariantId String?
  productLayout    ProductLayout? @relation(fields: [productLayoutId], references: [id])
  
  // Relations
  customerDesigns  CustomerDesign[]

  @@index([shop])
  @@index([shopifyProductId])
  @@index([masterTemplateId])
  @@index([productLayoutId])
  @@index([layoutVariantId])
}

model TemplateColor {
  id        String   @id @default(cuid())
  chipColor String   @unique
  color1    String
  color2    String
  color3    String
  color4    String?
  color5    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id        String   @id @default(cuid())
  shop      String
  type      String
  status    String
  data      String
  result    String?
  error     String?
  progress  Int      @default(0)
  total     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shop, status])
  @@index([createdAt])
}

model CustomerDesign {
  id               String    @id @default(cuid())
  shop             String
  customerId       String?
  email            String?
  
  // Design references
  templateId       String
  productId        String
  variantId        String
  
  // Design data
  canvasState      String
  thumbnail        String
  name             String?
  
  // Status tracking
  status           String    @default("draft")
  orderId          String?
  orderLineItemId  String?
  
  // Sharing & Access
  shareToken       String?   @unique @default(cuid())
  isPublic         Boolean   @default(false)
  
  // Auto-cleanup for drafts
  expiresAt        DateTime?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  template         Template  @relation(fields: [templateId], references: [id])
  
  @@index([shop, customerId])
  @@index([shop, email])
  @@index([shareToken])
  @@index([status])
  @@index([expiresAt])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)

  @@map("session")
}

model ProductLayout {
  id             String     @id @default(cuid())
  name           String
  shop           String
  width          Int
  height         Int
  baseImageUrl   String
  attributes     Json
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  designableArea Json
  variantImages  Json       @default("{}")
  templates      Template[]

  @@index([shop])
}

model Layout {
  id               String          @id @default(cuid())
  shop             String
  shopifyProductId String
  productTitle     String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  layoutVariants   LayoutVariant[]

  @@unique([shop, shopifyProductId])
  @@index([shop])
}

model LayoutVariant {
  id               String     @id @default(cuid())
  layoutId         String
  shopifyVariantId String
  variantTitle     String
  baseImageUrl     String     // Legacy: single image or front image
  frontBaseImageUrl String?   // New: explicit front image
  backBaseImageUrl  String?   // New: explicit back image
  shopifyImageUrl  String?
  position         Int
  color            String?
  pattern          String?
  layout           Layout     @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  templates        Template[]

  @@unique([layoutId, shopifyVariantId])
  @@index([layoutId])
}

model Template {
  id               String           @id @default(cuid())
  name             String
  shop             String
  canvasData       String
  thumbnail        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  productLayoutId  String?
  colorVariant     String?
  isColorVariant   Boolean          @default(false)
  masterTemplateId String?
  shopifyProductId String?
  shopifyVariantId String?
  layoutVariantId  String?
  backCanvasData   String?
  frontCanvasData  String?
  backThumbnail    String?
  frontThumbnail   String?
  customerDesigns  CustomerDesign[]
  layoutVariant    LayoutVariant?   @relation(fields: [layoutVariantId], references: [id])
  productLayout    ProductLayout?   @relation(fields: [productLayoutId], references: [id])

  @@index([shop])
  @@index([shopifyProductId])
  @@index([masterTemplateId])
  @@index([productLayoutId])
  @@index([layoutVariantId])
}

model TemplateColor {
  id        String   @id @default(cuid())
  chipColor String   @unique
  color1    String
  color2    String
  color3    String
  color4    String?
  color5    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id        String   @id @default(cuid())
  shop      String
  type      String
  status    String
  data      String
  result    String?
  error     String?
  progress  Int      @default(0)
  total     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shop, status])
  @@index([createdAt])
}

model CustomerDesign {
  id              String    @id @default(cuid())
  shop            String
  customerId      String?
  email           String?
  templateId      String
  productId       String
  variantId       String
  canvasState     String
  thumbnail       String
  name            String?
  status          String    @default("draft")
  orderId         String?
  orderLineItemId String?
  shareToken      String?   @unique @default(cuid())
  isPublic        Boolean   @default(false)
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  template        Template  @relation(fields: [templateId], references: [id])

  @@index([shop, customerId])
  @@index([shop, email])
  @@index([shareToken])
  @@index([status])
  @@index([expiresAt])
}

model UserAsset {
  id          String   @id @default(cuid())
  shop        String
  customerId  String?  // Shopify customer ID when logged in
  sessionId   String?  // Browser session for anonymous users
  url         String   // S3 URL
  filename    String
  filesize    Int
  width       Int?
  height      Int?
  mimetype    String
  tags        String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([shop, customerId])
  @@index([shop, sessionId])
  @@index([createdAt])
}
